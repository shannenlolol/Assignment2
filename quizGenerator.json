{"thirdPartyDependencies":[],"code":"async function startup(state, tools) {\n    tools.reply(\"Welcome to the Cloud Computing Quiz Generator!\");\n    state.isReadyRequested = false;\n    state.isChapterRequested = false;\n    state.isNumberOfQuestionsRequested = false;\n    state.isDifficultyRequested = false;\n    state.isQuestionTypeRequested = false;\n    state.isQuizRequested = false;\n    if (!state.isReadyRequested) {\n      state.isReadyRequested = true;\n      tools.reply(\"Are you ready to create a quiz for your cloud computing class?\");\n      return;\n    }\n}\n\nfunction isValidChapter(input, chapters) {\n  const number = parseInt(input, 10);\n  return Number.isInteger(number) && number > 0 && number <= chapters.length;\n}\n\nfunction isValidPositiveInteger(input) {\n  const number = parseInt(input, 10);\n  return Number.isInteger(number) && number > 0;\n}\n\nfunction isValidDifficulty(input) {\n  const number = parseInt(input, 10);\n  return Number.isInteger(number) && number >= 1 && number <= 10;\n}\n\nfunction isValidType(response) {\n  const trimmedResponse = response.trim().toUpperCase();\n  return trimmedResponse === 'A' || trimmedResponse === 'B';\n}\n\nasync function run(payload, state, tools) {\n  const userResponse = payload.toLowerCase().trim();\n  const chapters = [\n    \"Introduction to cloud computing\",\n    \"Data Center Networking\",\n    \"Virtualization in Cloud\",\n    \"Cloud CPU Scheduling\",\n    \"Cloud Security CAPTCHA-ReCAPTCHA\",\n    \"Cloud Security\",\n    \"CAP Theorem\",\n    \"Pagerank Algorithm\"\n  ];\n  \n\n  \n  if (state.isReadyRequested && !state.isChapterRequested) {\n    if (userResponse === 'yes' || userResponse === 'sure') {\n      state.isChapterRequested = true;\n      let chaptersList = chapters.map((chapter, index) => `${index + 1}. ${chapter}`).join('\\n');\n      tools.reply(`Which chapter would you like to focus on? Here are the chapters:\\n\\n${chaptersList}`);\n      return;\n    } else {\n      tools.reply(\"Please let me know when you're ready to proceed.\");\n      return;\n    }\n  }\n  \n  if (state.isChapterRequested && !state.isNumberOfQuestionsRequested) {\n    if (isValidChapter(userResponse, chapters)) {\n      state.isNumberOfQuestionsRequested = true;\n      state.selectedChapter = chapters[parseInt(userResponse, 10) - 1];\n      tools.reply(`You've selected \"${state.selectedChapter}\". How many questions would you like to have in the quiz?`);\n      return;\n    } else {\n      tools.reply(\"That's not a valid chapter number. Please enter a number from the list provided.\");\n      return;\n    }\n  }\n  \n  if (state.isNumberOfQuestionsRequested && !state.isDifficultyRequested) {\n    if (isValidPositiveInteger(userResponse)) {\n      state.isDifficultyRequested = true;\n      state.numberOfQuestions = parseInt(userResponse, 10);\n      tools.reply(\"What difficulty level would you like the quiz to be, on a scale of 1 to 10?\");\n      return;\n    } else {\n      tools.reply(\"Please enter a valid number of questions.\");\n      return;\n    }\n  }\n  \n  if (state.isDifficultyRequested && !state.isQuestionTypeRequested) {\n    if (isValidDifficulty(userResponse)) {\n      state.isQuestionTypeRequested = true;\n      state.difficultyLevel = parseInt(userResponse, 10);\n      tools.reply(\"What type of questions would you like?\\n\\nA: Multiple Choice Questions (MCQ)\\n\\nB: Structured Questions\");\n      return;\n    } else {\n      tools.reply(\"Please enter a valid difficulty level between 1 and 10.\");\n      return;\n    }\n  }\n  \n  if (state.isQuestionTypeRequested && !state.isQuizRequested) {\n    if (isValidType(userResponse)) {\n      state.isQuizRequested = true;\n      state.questionType = userResponse.toUpperCase() === 'A' ? \"Multiple Choice Questions\" : \"Structured Questions\";\n      tools.reply(`A quiz with ${state.numberOfQuestions} ${state.questionType} of difficulty level ${state.difficultyLevel} for the chapter \"${state.selectedChapter}\" will be generated.`);\n      state.quizGenerated = await tools.quizGenerator({quiz: `A quiz with ${state.numberOfQuestions} ${state.questionType} of difficulty level ${state.difficultyLevel} for the chapter \"${state.selectedChapter}\" will be generated.`});\n      tools.reply(state.quizGenerated);\n      return;\n    } else {\n      tools.reply(\"Please enter either 'A' for MCQ or 'B' for Structured Questions.\");\n      return;\n    }\n  }\n  if (state.isQuizRequested) {\n    const markingGenerated = await tools.markQuiz({userQuiz: userResponse,quiz: state.quizGenerated });\n    tools.reply(markingGenerated);\n    return;\n  }\n}\n","llmFunctions":[{"functionName":"quizGenerator","description":"generate a quiz using quiz","arguments":["quiz"],"enableMemory":false,"messageHistory":["memoryPlaceholder",{"role":"system","content":"generate a quiz of questions using {{quiz}}, without answers, and with a presentable format"}],"stream":false,"parameters":{"maxResponse":4096,"temperature":0.7,"topP":0.95,"frequencyPenalty":0,"presencePenalty":0},"functions":[]},{"functionName":"markQuiz","description":"mark the userQuiz","arguments":["userQuiz","quiz"],"enableMemory":true,"messageHistory":["memoryPlaceholder",{"role":"user","content":"mark the answers in {{userQuiz}} against the quiz you generated previously in {{quiz}}, telling if the answers are correct or wrong with explanations, and how many question were correct or wrong\n"}],"stream":false,"parameters":{"maxResponse":4096,"temperature":0.7,"topP":0.95,"frequencyPenalty":0,"presencePenalty":0},"functions":[]}]}
